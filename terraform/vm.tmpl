terraform {
    required_providers {
      libvirt = {
        source = "dmacvicar/libvirt"
      }
    }
  
  }
  
  # instance the provider
  provider "libvirt" {
    uri = "qemu:///system"
  }

  {% for vm in vms %}
  # We fetch the latest ubuntu release image from their mirrors
  resource "libvirt_volume" "vol-{{ vm.hostname }}-{{ vm.indx }}" {
    name   = "vol-{{ vm.hostname }}-{{ vm.indx }}.qcow2"
    pool   = "default" 
    source = "/pool/iso/ubuntu22.04.img"
    format = "qcow2"
  }
  
    resource "libvirt_cloudinit_disk" "vol-cloudinit-{{ vm.hostname }}-{{ vm.indx }}" {
     name   = "vol-cloudinit-{{ vm.hostname }}-{{ vm.indx }}.qcow2"
     pool  = "default"
     user_data = templatefile("${path.module}/cloud_init.cfg", {
      host_name =  "{{ vm.hostname }}"
      auth_key  = file("~/.ssh/id_vm.pub")
    })
    network_config = templatefile("${path.module}/network_config.cfg", {
      interface = "ens4"
      ip_addr   = "{{ vm.ip }}"
      mac_addr  = "{{ vm.mac }}"
    })
  }
  # Create the machine
  resource "libvirt_domain" "dom-{{ vm.hostname }}-{{ vm.indx }}" {
    name       = "{{ vm.hostname }}-{{ vm.indx }}"
    memory     = "{{ vm.memory }}"
    vcpu       =  "{{ vm.vcpu }}"
    machine    = "pc"
    autostart  = true
  #  qemu_agent = true # this is recommended to get ip address
    disk {
      volume_id = libvirt_volume.vol-{{ vm.hostname }}-{{ vm.indx }}.id
    }
    cloudinit = libvirt_cloudinit_disk.vol-cloudinit-{{ vm.hostname }}-{{ vm.indx }}.id
    network_interface {
      network_name = "default"
    }
    network_interface {
      bridge    = "br0"
      addresses = ["{{ vm.ip }}"]
      mac       = "{{ vm.mac }}"
    }
    boot_device {
      dev = ["hd", "network"]
    }
    # IMPORTANT
    # Ubuntu can hang is a isa-serial is not present at boot time.
    # If you find your CPU 100% and never is available this is why
    console {
      type        = "pty"
      target_port = "0"
      target_type = "serial"
    }
  
    console {
      type        = "pty"
      target_type = "virtio"
      target_port = "1"
    }
  
    graphics {
      type        = "spice"
      listen_type = "address"
      autoport    = "true"
    }
  }
{% endfor %}   
